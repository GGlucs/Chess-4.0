/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./main.js":
/*!*****************!*\
  !*** ./main.js ***!
  \*****************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _src_Board__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/Board */ \"./src/Board.js\");\n/* harmony import */ var _src_Pieces__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/Pieces */ \"./src/Pieces.js\");\n/* harmony import */ var _src_ClickFunctions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./src/ClickFunctions */ \"./src/ClickFunctions.js\");\n\n\n\nvar board = new _src_Board__WEBPACK_IMPORTED_MODULE_0__.default();\n\nfunction setPosition(pos) {\n  switch (pos) {\n    case 1:\n      var kd = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.King('d');\n      var kw = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.King('w');\n      var qd = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Queen('d');\n      var qw = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Queen('w');\n      var bd1 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Bishop('d');\n      var bw1 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Bishop('w');\n      var bd2 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Bishop('d');\n      var bw2 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Bishop('w');\n      var nd1 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Knight('d');\n      var nw1 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Knight('w');\n      var nd2 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Knight('d');\n      var nw2 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Knight('w');\n      var rd1 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Rook('d');\n      var rw1 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Rook('w');\n      var rd2 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Rook('d');\n      var rw2 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Rook('w');\n      var pd1 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Pawn('d');\n      var pw1 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Pawn('w');\n      var pd2 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Pawn('d');\n      var pw2 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Pawn('w');\n      var pd3 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Pawn('d');\n      var pw3 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Pawn('w');\n      var pd4 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Pawn('d');\n      var pw4 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Pawn('w');\n      var pd5 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Pawn('d');\n      var pw5 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Pawn('w');\n      var pd6 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Pawn('d');\n      var pw6 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Pawn('w');\n      var pd7 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Pawn('d');\n      var pw7 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Pawn('w');\n      var pd8 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Pawn('d');\n      var pw8 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Pawn('w');\n      var wpawns = [pw1, pw2, pw3, pw4, pw5, pw6, pw7, pw8];\n      var dpawns = [pd1, pd2, pd3, pd4, pd5, pd6, pd7, pd8];\n      var dpieces = [rd1, nd1, bd1, qd, kd, bd2, nd2, rd2];\n      var wpieces = [rw1, nw1, bw1, qw, kw, bw2, nw2, rw2];\n\n      for (var x = 0; x < 8; x++) {\n        board.putOn(0, x, wpieces[x]);\n        board.putOn(1, x, wpawns[x]);\n        board.putOn(6, x, dpawns[x]);\n        board.putOn(7, x, dpieces[x]);\n      }\n\n      break;\n\n    case 2:\n      var kd = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.King('d');\n      var kw = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.King('w');\n      var pd1 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Pawn('d');\n      var pw1 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Pawn('w');\n      var pd2 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Pawn('d');\n      var pw2 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Pawn('w');\n      var bd1 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Bishop('d');\n      var bw1 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Bishop('w');\n      var qd = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Queen('d');\n      var qw = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Queen('w');\n      var rd1 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Rook('d');\n      var pw3 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Pawn('w');\n      board.putOn(3, 0, kw);\n      board.putOn(7, 4, kd);\n      board.putOn(6, 1, pd1);\n      board.putOn(2, 0, pw1);\n      board.putOn(3, 1, pw2);\n      board.putOn(2, 1, bw1);\n      board.putOn(7, 3, qd);\n      board.putOn(0, 6, qw);\n      board.putOn(4, 2, pw1);\n      board.putOn(7, 1, rd1);\n      break;\n\n    case 3:\n      var kd = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.King('d');\n      var kw = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.King('w');\n      var qd = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Queen('d');\n      var pw1 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Pawn('w');\n      var bw1 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Bishop('w');\n      var pw2 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Pawn('w');\n      var bd1 = new _src_Pieces__WEBPACK_IMPORTED_MODULE_1__.Bishop('d');\n      board.putOn(7, 0, kw);\n      board.putOn(7, 6, kd);\n      board.putOn(6, 0, pw2);\n      board.putOn(6, 1, pw1);\n      board.putOn(0, 5, qd);\n      board.putOn(1, 1, bw1);\n      board.putOn(1, 7, bd1);\n    //board.putOn()\n  }\n}\n\nsetPosition(1);\nboard.update(0);\nvar clickObject = new _src_ClickFunctions__WEBPACK_IMPORTED_MODULE_2__.default();\n\nfor (var i = 0; i < 8; i++) {\n  clickObject.saveB1[0][i] = [];\n  clickObject.saveB2[0][i] = [];\n  clickObject.varSaveState[0][i] = [];\n\n  for (var j = 0; j < 8; j++) {\n    clickObject.saveB1[0][i][j] = board.b1[i][j];\n    clickObject.saveB2[0][i][j] = board.b2[i][j].innerHTML;\n\n    if (board.b1[i][j] != null) {\n      clickObject.varSaveState[0][i][j] = Object.assign({}, board.b1[i][j]);\n    } else {\n      clickObject.varSaveState[0][i][j] = board.b1[i][j];\n    }\n  }\n}\n\nfunction clickSq(elem) {\n  clickObject.click(elem, board.b1, board.b2, board);\n}\n\nfunction setPlayState(turn) {\n  clickObject.setState(turn, board.b1, board.b2);\n}\n\nfunction sqPromotion(elem) {\n  clickObject.pawnPromotion(elem, board, _src_Pieces__WEBPACK_IMPORTED_MODULE_1__);\n}\n\nwindow.clickSq = clickSq;\nwindow.setPlayState = setPlayState;\nwindow.sqPromotion = sqPromotion;\n\n//# sourceURL=webpack://Chess/./main.js?");

/***/ }),

/***/ "./src/Board.js":
/*!**********************!*\
  !*** ./src/Board.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Board)\n/* harmony export */ });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Board = /*#__PURE__*/function () {\n  function Board() {\n    _classCallCheck(this, Board);\n\n    this.b1 = [];\n    this.b2 = [];\n    this.savePositionKing = [];\n    var color = {\n      0: 'burlywood',\n      1: 'brown'\n    };\n\n    for (var i = 0; i < 8; i++) {\n      this.b1[i] = [];\n      this.b2[i] = [];\n\n      for (var j = 0; j < 8; j++) {\n        this.b1[i][j] = null;\n        var div = \"<div id='\" + ((i - 7) * -1 + 0) + \"\" + j + \"' class='square \" + color[(i + j) % 2] + \"' style='top: \" + i * 96 + \"px;left:\" + j * 96 + \"px' onClick='clickSq(this)'></div>\";\n        document.getElementById('board').innerHTML += div;\n      }\n    }\n\n    this.updateDOM();\n    this.scanPiece = {\n      'left': function _left(b1, i, j, piece) {\n        for (var x = 1; x <= piece.left; x++) {\n          if (j - x == -1) {\n            break;\n          }\n\n          piece.attOnboard.push([i, j - x]);\n\n          if (b1[i][j - x] != null) {\n            break;\n          }\n        }\n      },\n      'up': function _up(b1, i, j, piece) {\n        for (var x = 1; x <= piece.up; x++) {\n          if (i + x == 8) {\n            break;\n          }\n\n          if (piece.type == 'p' && piece.color == 'w' && b1[i + x][j] != null) {\n            break;\n          }\n\n          piece.attOnboard.push([i + x, j]);\n\n          if (b1[i + x][j] != null) {\n            break;\n          }\n        }\n      },\n      'right': function _right(b1, i, j, piece) {\n        for (var x = 1; x <= piece.right; x++) {\n          if (j + x == 8) {\n            break;\n          }\n\n          piece.attOnboard.push([i, j + x]);\n\n          if (b1[i][j + x] != null) {\n            break;\n          }\n        }\n      },\n      'down': function _down(b1, i, j, piece) {\n        for (var x = 1; x <= piece.down; x++) {\n          if (i - x == -1) {\n            break;\n          }\n\n          if (piece.type == 'p' && piece.color == 'd' && b1[i - x][j] != null) {\n            break;\n          }\n\n          piece.attOnboard.push([i - x, j]);\n\n          if (b1[i - x][j] != null) {\n            break;\n          }\n        }\n      },\n      'leftup': function _leftup(b1, i, j, piece) {\n        for (var x = 1; x <= piece.leftup; x++) {\n          if (i + x == 8 || j - x == -1) {\n            break;\n          }\n\n          piece.attOnboard.push([i + x, j - x]);\n\n          if (b1[i + x][j - x] != null) {\n            break;\n          }\n        }\n      },\n      'rightup': function _rightup(b1, i, j, piece) {\n        for (var x = 1; x <= piece.rightup; x++) {\n          if (i + x == 8 || j + x == 8) {\n            break;\n          }\n\n          piece.attOnboard.push([i + x, j + x]);\n\n          if (b1[i + x][j + x] != null) {\n            break;\n          }\n        }\n      },\n      'rightdown': function _rightdown(b1, i, j, piece) {\n        for (var x = 1; x <= piece.rightdown; x++) {\n          if (i - x == -1 || j + x == 8) {\n            break;\n          }\n\n          piece.attOnboard.push([i - x, j + x]);\n\n          if (b1[i - x][j + x] != null) {\n            break;\n          }\n        }\n      },\n      'leftdown': function _leftdown(b1, i, j, piece) {\n        for (var x = 1; x <= piece.leftdown; x++) {\n          if (i - x == -1 || j - x == -1) {\n            break;\n          }\n\n          piece.attOnboard.push([i - x, j - x]);\n\n          if (b1[i - x][j - x] != null) {\n            break;\n          }\n        }\n      },\n      'knight': function _knight(b1, i, j, piece) {\n        for (var x = 0; x < 4; x++) {\n          var row = piece.additions[x][0];\n          var col = piece.additions[x][1];\n\n          if (i + row <= 7 && 0 <= j + col && j + col <= 7) {\n            piece.attOnboard.push([i + row, j + col]);\n          }\n\n          if (i - row >= 0 && 0 <= j + col && j + col <= 7) {\n            piece.attOnboard.push([i - row, j + col]);\n          }\n        }\n      }\n    };\n  }\n\n  _createClass(Board, [{\n    key: \"update\",\n    value: function update(actualTurn) {\n      this.savePositionKing = [];\n\n      for (var i = 0; i < 8; i++) {\n        for (var j = 0; j < 8; j++) {\n          if (this.b1[i][j] != null) {\n            var piece = this.b1[i][j];\n            var loc = i.toString() + j.toString();\n            piece.attOnboard = [];\n            piece.loc = loc;\n            piece.row = i;\n            piece.col = j;\n            piece.actualTurn = actualTurn;\n\n            if (piece.type == 'p') {\n              piece.exceptions(this.b1);\n            }\n\n            if (piece.type == 'k') {\n              this.savePositionKing.push([i, j, piece.color]);\n              piece.castle(this.b1);\n            }\n\n            for (var y = 0; y < piece.numDirections; y++) {\n              this.scanPiece[piece.attackstring[y]](this.b1, i, j, piece);\n            }\n          }\n        }\n      }\n\n      for (var x = 0; x < this.savePositionKing.length; x++) {\n        var i = this.savePositionKing[x][0];\n        var j = this.savePositionKing[x][1];\n        var king = this.b1[i][j];\n        king.checkAndCastleDetect(this.b1);\n      }\n    }\n  }, {\n    key: \"putOn\",\n    value: function putOn(i, j, piece) {\n      this.b1[i][j] = piece;\n      this.b2[i][j].innerHTML = piece.image;\n    }\n  }, {\n    key: \"putOut\",\n    value: function putOut(i, j) {\n      this.b1[i][j] = null;\n      this.b2[i][j].innerHTML = '';\n    }\n  }, {\n    key: \"updateDOM\",\n    value: function updateDOM() {\n      for (var i = 0; i < 8; i++) {\n        for (var j = 0; j < 8; j++) {\n          var loc = i.toString() + j.toString();\n          this.b2[i][j] = document.getElementById(loc);\n        }\n      }\n    }\n  }]);\n\n  return Board;\n}();\n\n\n\n//# sourceURL=webpack://Chess/./src/Board.js?");

/***/ }),

/***/ "./src/ClickFunctions.js":
/*!*******************************!*\
  !*** ./src/ClickFunctions.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ clickFunctions)\n/* harmony export */ });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar clickFunctions = /*#__PURE__*/function () {\n  function clickFunctions() {\n    _classCallCheck(this, clickFunctions);\n\n    this.dotSquares = [];\n    this.greenSquares = [];\n    this.varSaveState = [[]];\n    this.saveB1 = [[]];\n    this.saveB2 = [[]];\n    this.countTurn = 1;\n    this.setTurn = 0;\n    this.translate_row = ['1', '2', '3', '4', '5', '6', '7', '8'];\n    this.translate_col = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n    this.whatColorTurn = ['d', 'w'];\n    this.checkMate = false;\n    this.promotionChoiceClick = false;\n  }\n\n  _createClass(clickFunctions, [{\n    key: \"click\",\n    value: function click(elem, b1, b2, board) {\n      var iPast = parseInt(elem.id[0]);\n      var jPast = parseInt(elem.id[1]);\n\n      if (elem.childNodes.length == 1) {\n        var sqState = elem.childNodes[0].className;\n      } else {\n        var sqState = null;\n      }\n\n      if (sqState == null) {\n        this.clear(b1, b2);\n      } else if (elem.className == 'square green') {\n        var iFut = iPast;\n        var jFut = jPast;\n        iPast = parseInt(elem.id[2]);\n        jPast = parseInt(elem.id[3]);\n        var piece = b1[iPast][jPast];\n        this.clear(b1, b2);\n        this.move(iPast, jPast, iFut, jFut, piece, board);\n      } else if (sqState == 'piece') {\n        this.clear(b1, b2);\n        var piece = b1[iPast][jPast];\n\n        if (this.whatColorTurn[this.countTurn % 2] == piece.color) {\n          for (var x = 0; x < piece.attOnboard.length; x++) {\n            var iFut = piece.attOnboard[x][0];\n            var jFut = piece.attOnboard[x][1];\n\n            if (b2[iFut][jFut].innerHTML == '') {\n              this.dotSquares.push([iFut, jFut]);\n              b2[iFut][jFut].innerHTML = \"<span id = 'd\" + piece.loc + \"'class='dot'><span>\";\n            } else if (b1[iFut][jFut].color == piece.enemy) {\n              this.greenSquares.push([b2[iFut][jFut].id, b2[iFut][jFut].className]);\n              b2[iFut][jFut].className = \"square green\";\n              b2[iFut][jFut].id += iPast.toString() + jPast.toString();\n            }\n          }\n        }\n      } else if (sqState == 'dot') {\n        var iFut = iPast;\n        var jFut = jPast;\n        iPast = parseInt(elem.childNodes[0].id[1]);\n        jPast = parseInt(elem.childNodes[0].id[2]);\n        var piece = b1[iPast][jPast];\n        this.clear(b1, b2);\n        this.move(iPast, jPast, iFut, jFut, piece, board);\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear(b1, b2) {\n      for (var x = 0; x < this.dotSquares.length; x++) {\n        var i = this.dotSquares[x][0];\n        var j = this.dotSquares[x][1];\n        b2[i][j].innerHTML = '';\n      }\n\n      this.dotSquares = [];\n\n      for (var x = 0; x < this.greenSquares.length; x++) {\n        var _i = parseInt(this.greenSquares[x][0][0]);\n\n        var _j = parseInt(this.greenSquares[x][0][1]);\n\n        var id = this.greenSquares[x][0];\n        var cName = this.greenSquares[x][1];\n        b2[_i][_j].className = cName;\n        b2[_i][_j].id = id;\n      }\n\n      this.greenSquares = [];\n      var divBoard = document.getElementById('board');\n\n      if (divBoard.childElementCount > 64) {\n        divBoard.removeChild(document.getElementById('promotionDiv'));\n      }\n    }\n  }, {\n    key: \"move\",\n    value: function move(iPast, jPast, iFut, jFut, piece, board) {\n      if (this.setTurn + 1 == this.countTurn) {\n        piece.lastMove = [this.countTurn, iPast, jPast, iFut, jFut];\n\n        if (piece.type == 'p') {\n          if (Math.abs(iPast - iFut) == 2) {\n            piece.twoSteps = true;\n          } else {\n            piece.twoSteps = false;\n          }\n\n          if ([iPast, jPast, iFut, jFut].toString() == piece.passant.toString()) {\n            board.putOut(iPast, jFut);\n          }\n\n          if (iFut == piece.finalLine) {\n            this.appearPromotionDiv(piece.color, iPast, jPast, iFut, jFut);\n            board.updateDOM();\n            return;\n          }\n        }\n\n        if (piece.type == 'k' && (jFut == jPast + 2 || jFut == jPast - 2)) {\n          if (piece.castleKingSide == true && jFut == jPast + 2) {\n            board.b1[iFut][7].stopped = false;\n            piece.stopped = false;\n            board.putOn(iFut, jFut - 1, board.b1[iFut][7]);\n            board.putOut(iFut, 7);\n            board.putOn(iFut, jFut, piece);\n            board.putOut(iPast, jPast);\n            board.update(this.countTurn);\n            this.saveState(board.b1, board.b2);\n            this.writePlay(piece, iFut, jFut);\n            this.setTurn = this.countTurn;\n            this.countTurn++;\n          }\n\n          if (piece.castleQueenSide == true && jFut == jPast - 2) {\n            board.b1[iFut][0].stopped = false;\n            piece.stopped = false;\n            board.putOn(iFut, jFut + 1, board.b1[iFut][0]);\n            board.putOut(iFut, 0);\n            board.putOn(iFut, jFut, piece);\n            board.putOut(iPast, jPast);\n            board.update(this.countTurn);\n            this.saveState(board.b1, board.b2);\n            this.writePlay(piece, iFut, jFut);\n            this.setTurn = this.countTurn;\n            this.countTurn++;\n          }\n\n          if (this.kingInCheck(board.b1, board.savePositionKing, piece.enemy)) {\n            if (this.checkMateValidation(board, piece.enemy, this.countTurn)) {\n              var colorWin = {\n                w: 'white',\n                d: 'black'\n              };\n              document.getElementById('board').innerHTML += \"<div class = menssageWins>\" + colorWin[piece.color] + \" wins</div>\";\n            }\n          }\n\n          return;\n        }\n\n        piece.stopped = false;\n        board.putOn(iFut, jFut, piece);\n        board.putOut(iPast, jPast);\n        board.update(this.countTurn);\n        this.saveState(board.b1, board.b2);\n        this.writePlay(piece, iFut, jFut);\n        this.setTurn = this.countTurn;\n        this.countTurn++;\n\n        if (this.kingInCheck(board.b1, board.savePositionKing, piece.color)) {\n          var box = document.getElementById('box');\n          var range2 = document.getElementById('box').childElementCount;\n          box.removeChild(box.childNodes[range2 - 1]);\n          this.setState(this.countTurn - 3, board.b1, board.b2);\n          this.countTurn--;\n          return;\n        }\n\n        if (this.kingInCheck(board.b1, board.savePositionKing, piece.enemy)) {\n          if (this.checkMateValidation(board, piece.enemy, this.countTurn)) {\n            var colorWin = {\n              w: 'white',\n              d: 'black'\n            };\n            document.getElementById('board').innerHTML += \"<div class = menssageWins>\" + colorWin[piece.color] + \" wins</div>\";\n          }\n        }\n      }\n    }\n  }, {\n    key: \"saveState\",\n    value: function saveState(b1, b2) {\n      if (this.countTurn == this.varSaveState.length + 1) this.varSaveState.push([]);\n      this.saveB1.push([]);\n      this.saveB2.push([]);\n      var range = this.varSaveState.length;\n\n      for (var i = 0; i < 8; i++) {\n        this.varSaveState[range - 1][i] = [];\n        this.saveB1[range - 1][i] = [];\n        this.saveB2[range - 1][i] = [];\n\n        for (var j = 0; j < 8; j++) {\n          this.saveB1[range - 1][i][j] = b1[i][j];\n          this.saveB2[range - 1][i][j] = b2[i][j].innerHTML;\n\n          if (b1[i][j] != null) {\n            this.varSaveState[range - 1][i][j] = Object.assign({}, b1[i][j]);\n          } else {\n            this.varSaveState[range - 1][i][j] = b1[i][j];\n          }\n        }\n      }\n    }\n  }, {\n    key: \"writePlay\",\n    value: function writePlay(piece, iFut, jFut) {\n      if (piece.type != 'p') {\n        var play = piece.type.toUpperCase() + this.translate_col[jFut] + this.translate_row[iFut];\n      } else {\n        var play = this.translate_col[jFut] + this.translate_row[iFut];\n      }\n\n      if (this.countTurn % 2 == 1) {\n        document.getElementById(\"box\").innerHTML += \"<span class='playPast' onClick='setPlayState(\" + (this.countTurn - 1) + \")'>\" + play + \" \" + \"</span>\";\n      } else {\n        document.getElementById(\"box\").innerHTML += \"<span class='playPast' style='left:96px' onClick='setPlayState(\" + (this.countTurn - 1) + \")'>\" + play + \"<br></span>\";\n      }\n    }\n  }, {\n    key: \"setState\",\n    value: function setState(turn, b1, b2) {\n      this.setTurn = turn + 1;\n\n      for (var i = 0; i < 8; i++) {\n        for (var j = 0; j < 8; j++) {\n          b1[i][j] = this.saveB1[turn][i][j];\n          b2[i][j].innerHTML = this.saveB2[turn][i][j];\n\n          if (b1[i][j] != null) {\n            Object.assign(b1[i][j], this.varSaveState[turn][i][j]);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"kingInCheck\",\n    value: function kingInCheck(b1, PositionKing, color) {\n      for (var x = 0; x < PositionKing.length; x++) {\n        if (PositionKing[x][2] == color) {\n          var i = PositionKing[x][0];\n          var j = PositionKing[x][1];\n          return b1[i][j].check;\n        }\n      }\n    }\n  }, {\n    key: \"checkMateValidation\",\n    value: function checkMateValidation(board, color, turn) {\n      var letSaveb1 = [];\n      var letStateObj = [];\n      var possibleMoves = [];\n\n      for (var _x = 0; _x < 8; _x++) {\n        letSaveb1[_x] = [];\n        letStateObj[_x] = [];\n\n        for (var _y = 0; _y < 8; _y++) {\n          letSaveb1[_x][_y] = board.b1[_x][_y];\n\n          if (board.b1[_x][_y] != null) {\n            letStateObj[_x][_y] = Object.assign({}, board.b1[_x][_y]);\n          } else {\n            letStateObj[_x][_y] = board.b1[_x][_y];\n          }\n        }\n      }\n\n      for (var i = 0; i < 8; i++) {\n        for (var j = 0; j < 8; j++) {\n          if (board.b1[i][j] != null) {\n            if (board.b1[i][j].color == color) {\n              for (var x = 0; x < board.b1[i][j].attOnboard.length; x++) {\n                var piece = board.b1[i][j];\n                var type = piece.type;\n                var iPast = i;\n                var jPast = j;\n                var iFut = piece.attOnboard[x][0];\n                var jFut = piece.attOnboard[x][1];\n\n                if (board.b1[iFut][jFut] == null || board.b1[iFut][jFut].color == piece.enemy) {\n                  board.b1[iFut][jFut] = piece;\n                  board.b1[iPast][jPast] = null;\n\n                  if (type == 'p') {\n                    if ([iPast, jPast, iFut, jFut].toString() == piece.passant.toString()) {\n                      board.b1[iPast][jFut] = null;\n                    }\n                  }\n\n                  board.update(turn);\n                } else {\n                  continue;\n                }\n\n                if (!this.kingInCheck(board.b1, board.savePositionKing, color)) {\n                  console.log([type, iPast, jPast, iFut, jFut]);\n                  possibleMoves.push([type, iPast, jPast, iFut, jFut]);\n                }\n\n                for (var y = 0; y < 8; y++) {\n                  for (var z = 0; z < 8; z++) {\n                    board.b1[y][z] = letSaveb1[y][z];\n\n                    if (board.b1[y][z] != null) {\n                      board.b1[y][z] = Object.assign(board.b1[y][z], letStateObj[y][z]);\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      if (possibleMoves.length == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"appearPromotionDiv\",\n    value: function appearPromotionDiv(color, iPast, jPast, iFut, jFut) {\n      var left = jFut * 96;\n      var top = null;\n      var loc = iPast.toString() + jPast.toString() + iFut.toString() + jFut.toString();\n\n      if (color == 'w') {\n        top = 0;\n      } else {\n        top = 4 * 96;\n      }\n\n      var board = document.getElementById('board');\n      var div = \"<div id= 'promotionDiv' class='crownedPawn' style='top:\" + top + \"px;left:\" + left + \"px;'>\" + \"<div id='q\" + color + loc + \"' class='square'  onClick='sqPromotion(this)'><img class='piece' src='./imagens/\" + color + \"queen.png'></div>\" + \"<div id='r\" + color + loc + \"' class='square' style='top: 96px;' onClick='sqPromotion(this)'><img class='piece' src='./imagens/\" + color + \"rook.png'></div>\" + \"<div id='b\" + color + loc + \"' class='square' style='top: 192px;' onClick='sqPromotion(this)'><img class='piece' src='./imagens/\" + color + \"bishop.png'></div>\" + \"<div id='n\" + color + loc + \"' class='square' style='top: 288px;' onClick='sqPromotion(this)'><img class='piece' src='./imagens/\" + color + \"knight.png'></div></div>\";\n      board.innerHTML += div;\n    }\n  }, {\n    key: \"pawnPromotion\",\n    value: function pawnPromotion(elem, board, p) {\n      console.log(elem.id);\n      var iPast = parseInt(elem.id[2]);\n      var jPast = parseInt(elem.id[3]);\n      var iFut = parseInt(elem.id[4]);\n      var jFut = parseInt(elem.id[5]);\n      var color = elem.id[1];\n      var type = elem.id[0];\n      var choice = {\n        'q': new p.Queen(color),\n        'r': new p.Rook(color),\n        'b': new p.Bishop(color),\n        'n': new p.Knight(color)\n      };\n      var piece = choice[type];\n      board.putOn(iPast, jPast, piece);\n      this.move(iPast, jPast, iFut, jFut, piece, board);\n      this.clear(board.b1, board.b2);\n    }\n  }]);\n\n  return clickFunctions;\n}();\n\n\n\n//# sourceURL=webpack://Chess/./src/ClickFunctions.js?");

/***/ }),

/***/ "./src/Pieces.js":
/*!***********************!*\
  !*** ./src/Pieces.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Piece\": () => (/* binding */ Piece),\n/* harmony export */   \"Pawn\": () => (/* binding */ Pawn),\n/* harmony export */   \"Rook\": () => (/* binding */ Rook),\n/* harmony export */   \"Knight\": () => (/* binding */ Knight),\n/* harmony export */   \"Bishop\": () => (/* binding */ Bishop),\n/* harmony export */   \"Queen\": () => (/* binding */ Queen),\n/* harmony export */   \"King\": () => (/* binding */ King)\n/* harmony export */ });\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/* the mechanic of the pieces is simple, there will be piece classes\r\nthat will receive , type , color , row... and most important will\r\nreceive a list of directions and the range for each direction, for example:\r\nrook:\r\n    list = ['up','left','right','down']\r\n    up=7\r\n    left=7\r\n    right=7\r\n    down=7\r\nThis properties will be read in another function in board class that\r\nwill interact with the board and another pieces\r\n*/\nvar Piece = function Piece(color) {\n  _classCallCheck(this, Piece);\n\n  this.color = color;\n  this.row = null;\n  this.col = null;\n  this.attackstring = null; //> A list of directions,Ex: rook = [up,right,left,down].\n\n  this.numDirections = null; //> attackstring.length.\n\n  this.attOnboard = []; //> A list of attacks on the board, Ex: knight = [[2,2],[1,3]...].\n\n  this.loc = ''; //>row.toString + col.toString.\n\n  this.actualTurn = null;\n  this.lastMove = null; //> Ex: rook[0,0,0,1].\n\n  this.stopped = true; //> if piece moves, stopped = false.\n\n  switch (color) {\n    // enemy = color of the enemy.\n    case 'd':\n      this.enemy = 'w';\n      break;\n\n    case 'w':\n      this.enemy = 'd';\n      break;\n  }\n}; //All the classes extends to class Piece.\n\nvar Pawn = /*#__PURE__*/function (_Piece) {\n  _inherits(Pawn, _Piece);\n\n  var _super = _createSuper(Pawn);\n\n  function Pawn(color) {\n    var _this;\n\n    _classCallCheck(this, Pawn);\n\n    _this = _super.call(this, color);\n    _this.type = 'p';\n    _this.numDirections = 3;\n    _this.twoSteps = false; //if pawm move 2 squares forward.\n\n    _this.passant = []; // passant movement like: [4,3,5,2]. -->[4,3]previous position, [5,2]actual position\n\n    if (color == 'w') {\n      _this.up = 2;\n      _this.rightup = 0;\n      _this.leftup = 0;\n      _this.attackstring = ['up', 'rightup', 'leftup'];\n      _this.image = \"<img class= 'piece'src='./imagens/wpawn.png'>\";\n      _this.startLine = 1; //initial row.\n\n      _this.finalLine = 7; //promotion row.\n\n      _this.add = 1; // add is to diference the front of black pawns and white pawns, if:color=='d' add=-1.\n    } else if (color == 'd') {\n      _this.down = 2;\n      _this.rightdown = 0;\n      _this.leftdown = 0;\n      _this.attackstring = ['down', 'rightdown', 'leftdown'];\n      _this.image = \"<img class= 'piece'src='./imagens/dpawn.png'>\";\n      _this.startLine = 6;\n      _this.finalLine = 0;\n      _this.add = -1;\n    }\n\n    return _this;\n  } //pawns configuration always needs to update\n\n\n  _createClass(Pawn, [{\n    key: \"exceptions\",\n    value: function exceptions(b1) {\n      //b1 is a property of the class board, board.b1 = 8x8 matrix\n      var add = this.add;\n      var i = this.row;\n      var j = this.col;\n      var front = 2;\n      var left = 0;\n      var right = 0;\n      this.passant = [];\n\n      if (this.row != this.startLine) {\n        front = 1;\n      } //after first move, pawns only move 1 square forward\n\n\n      if (-1 < i + add && i + add < 8) {\n        if (b1[i + add][j + 1] != null) {\n          right = 1;\n        } else {\n          right = 0;\n        } //pawns can attack 1 square diagonally\n\n\n        if (b1[i + add][j - 1] != null) {\n          left = 1;\n        } else {\n          left = 0;\n        }\n      }\n\n      if (j + 1 < 8) {\n        //passant code right\n        if (b1[i][j + 1] != null) {\n          var piece = b1[i][j + 1];\n\n          if (piece.type == 'p' && piece.color == this.enemy) {\n            if (piece.twoSteps == true && Math.abs(this.actualTurn - piece.lastMove[0]) == 0) {\n              right = 1;\n              this.passant = [i, j, i + add, j + 1];\n            }\n          }\n        }\n      }\n\n      if (j - 1 > -1) {\n        //passant code left\n        if (b1[i][j - 1] != null) {\n          var piece = b1[i][j - 1];\n\n          if (piece.type == 'p' && piece.color == this.enemy) {\n            if (piece.twoSteps == true && Math.abs(this.actualTurn - piece.lastMove[0]) == 0) {\n              left = 1;\n              this.passant = [i, j, i + add, j - 1];\n            }\n          }\n        }\n      }\n\n      if (this.color == 'w') {\n        //pass the new configuration of this pawn\n        this.up = front;\n        this.rightup = right;\n        this.leftup = left;\n      } else {\n        this.down = front;\n        this.rightdown = right;\n        this.leftdown = left;\n      }\n      /*\r\n      if(i==this.finalLine){//promotion code , if pawn is on the final row , a div with pieces will appear\r\n          var left = j*96\r\n          var top = null\r\n          if(this.color=='w'){top=0}else{top=4*96}\r\n          var board = document.getElementById('board')\r\n          var div = \"<div class='crownedPawn' style='top:\"+top+\"px;left:\"+left+\"px;'>\"\r\n          +\"<div id='q\"+this.color+this.loc+\"' class='square'  onClick='sqPromotion(this)'><img class='piece' src='./imagens/\"+this.color+\"queen.png'></div>\"\r\n          +\"<div id='r\"+this.color+this.loc+\"' class='square' style='top: 96px;' onClick='sqPromotion(this)'><img class='piece' src='./imagens/\"+this.color+\"rook.png'></div>\"\r\n          +\"<div id='b\"+this.color+this.loc+\"' class='square' style='top: 192px;' onClick='sqPromotion(this)'><img class='piece' src='./imagens/\"+this.color+\"bishop.png'></div>\"\r\n          +\"<div id='n\"+this.color+this.loc+\"' class='square' style='top: 288px;' onClick='sqPromotion(this)'><img class='piece' src='./imagens/\"+this.color+\"knight.png'></div></div>\"\r\n          board.innerHTML += div}*/\n\n    }\n  }]);\n\n  return Pawn;\n}(Piece);\nvar Rook = /*#__PURE__*/function (_Piece2) {\n  _inherits(Rook, _Piece2);\n\n  var _super2 = _createSuper(Rook);\n\n  function Rook(color) {\n    var _this2;\n\n    _classCallCheck(this, Rook);\n\n    _this2 = _super2.call(this, color);\n    _this2.type = 'r';\n    _this2.up = 7;\n    _this2.right = 7;\n    _this2.down = 7;\n    _this2.left = 7;\n    _this2.attackstring = ['up', 'left', 'right', 'down'];\n    _this2.numDirections = 4;\n\n    if (color == 'w') {\n      _this2.image = \"<img class= 'piece'src='./imagens/wrook.png'>\";\n    } else if (color == 'd') {\n      _this2.image = \"<img class= 'piece'src='./imagens/drook.png'>\";\n    }\n\n    return _this2;\n  }\n\n  return Rook;\n}(Piece);\nvar Knight = /*#__PURE__*/function (_Piece3) {\n  _inherits(Knight, _Piece3);\n\n  var _super3 = _createSuper(Knight);\n\n  function Knight(color) {\n    var _this3;\n\n    _classCallCheck(this, Knight);\n\n    _this3 = _super3.call(this, color);\n    _this3.type = 'n';\n    _this3.attackstring = ['knight']; //knight needs a special moviment\n\n    _this3.numDirections = 1;\n    _this3.additions = [[1, 2], [2, 1], [2, -1], [1, -2]]; //this values will add with the row and col of the knight, Ex:i+1,j+2\n\n    if (color == 'w') {\n      _this3.image = \"<img class= 'piece'src='./imagens/wknight.png'>\";\n    } else if (color == 'd') {\n      _this3.image = \"<img class= 'piece'src='./imagens/dknight.png'>\";\n    }\n\n    return _this3;\n  }\n\n  return Knight;\n}(Piece);\nvar Bishop = /*#__PURE__*/function (_Piece4) {\n  _inherits(Bishop, _Piece4);\n\n  var _super4 = _createSuper(Bishop);\n\n  function Bishop(color) {\n    var _this4;\n\n    _classCallCheck(this, Bishop);\n\n    _this4 = _super4.call(this, color);\n    _this4.type = 'b';\n    _this4.rightup = 7;\n    _this4.leftup = 7;\n    _this4.rightdown = 7;\n    _this4.leftdown = 7;\n    _this4.attackstring = ['rightup', 'leftup', 'rightdown', 'leftdown'];\n    _this4.numDirections = 4;\n\n    if (color == 'w') {\n      _this4.image = \"<img class= 'piece'src='./imagens/wbishop.png'>\";\n    } else if (color == 'd') {\n      _this4.image = \"<img class= 'piece'src='./imagens/dbishop.png'>\";\n    }\n\n    return _this4;\n  }\n\n  return Bishop;\n}(Piece);\nvar Queen = /*#__PURE__*/function (_Piece5) {\n  _inherits(Queen, _Piece5);\n\n  var _super5 = _createSuper(Queen);\n\n  function Queen(color) {\n    var _this5;\n\n    _classCallCheck(this, Queen);\n\n    _this5 = _super5.call(this, color);\n    _this5.type = 'q';\n    _this5.rightup = 7;\n    _this5.leftup = 7;\n    _this5.rightdown = 7;\n    _this5.leftdown = 7;\n    _this5.up = 7;\n    _this5.right = 7;\n    _this5.down = 7;\n    _this5.left = 7;\n    _this5.attackstring = ['up', 'left', 'right', 'down', 'rightup', 'leftup', 'rightdown', 'leftdown'];\n    _this5.numDirections = 8;\n\n    if (color == 'w') {\n      _this5.image = \"<img class= 'piece'src='./imagens/wqueen.png'>\";\n    } else if (color == 'd') {\n      _this5.image = \"<img class= 'piece'src='./imagens/dqueen.png'>\";\n    }\n\n    return _this5;\n  }\n\n  return Queen;\n}(Piece);\nvar King = /*#__PURE__*/function (_Piece6) {\n  _inherits(King, _Piece6);\n\n  var _super6 = _createSuper(King);\n\n  function King(color) {\n    var _this6;\n\n    _classCallCheck(this, King);\n\n    _this6 = _super6.call(this, color);\n    _this6.type = 'k';\n    _this6.leftup = 1;\n    _this6.rightup = 1;\n    _this6.rightdown = 1;\n    _this6.leftdown = 1;\n    _this6.up = 1;\n    _this6.right = 1;\n    _this6.down = 1;\n    _this6.left = 1;\n    _this6.attackstring = ['up', 'left', 'right', 'down', 'rightup', 'leftup', 'rightdown', 'leftdown'];\n    _this6.numDirections = 8;\n    _this6.check = false; // if king in check, check = true\n\n    _this6.castleQueenSide = true; //if king can castle on the queen's side\n\n    _this6.castleKingSide = true; //if king can castle on the king's side\n\n    if (color == 'w') {\n      _this6.image = \"<img class= 'piece'src='./imagens/wking.png'>\";\n      _this6.startLine = 0; // var to differentiate the black king's row from the white king's row\n    } else if (color == 'd') {\n      _this6.image = \"<img class= 'piece'src='./imagens/dking.png'>\";\n      _this6.startLine = 7;\n    }\n\n    return _this6;\n  }\n\n  _createClass(King, [{\n    key: \"castle\",\n    value: function castle(b1) {\n      // rules of castle\n      var cKs = null;\n      var cQs = null;\n      var r = null;\n      var l = null;\n      var line = this.startLine;\n\n      if (this.stopped == true && b1[line][7] != null) {\n        if (b1[line][7].type == 'r' && b1[line][7].stopped == true) {\n          if (b1[line][5] == null && b1[line][6] == null) {\n            cKs = true;\n            r = 2;\n          } else {\n            cKs = false;\n            r = 1;\n          }\n        } else {\n          cKs = false;\n          r = 1;\n        }\n      } else {\n        cKs = false;\n        r = 1;\n      }\n\n      if (this.stopped == true && b1[line][0] != null) {\n        if (b1[line][0].type == 'r' && b1[line][0].stopped == true) {\n          if (b1[line][3] == null && b1[line][2] == null && b1[line][1] == null) {\n            cQs = true;\n            l = 2;\n          } else {\n            cQs = false;\n            l = 1;\n          }\n        } else {\n          cQs = false;\n          l = 1;\n        }\n      } else {\n        cQs = false;\n        l = 1;\n      }\n\n      this.castleKingSide = cKs;\n      this.right = r;\n      this.castleQueenSide = cQs;\n      this.left = l;\n    }\n  }, {\n    key: \"checkAndCastleDetect\",\n    value: function checkAndCastleDetect(b1) {\n      // will detect if there is an attack on the king and the castle squares\n      var noCheck = true;\n      var line = this.startLine;\n      var cKsPassedCondition = false;\n      var cQsPassedCondition = false;\n\n      for (var i = 0; i < 8; i++) {\n        for (var j = 0; j < 8; j++) {\n          if (b1[i][j] != null) {\n            if (b1[i][j].color == this.enemy) {\n              var piece = b1[i][j];\n              var range = piece.attOnboard.length;\n\n              for (var z = 0; z < range; z++) {\n                var i2 = piece.attOnboard[z][0];\n                var j2 = piece.attOnboard[z][1];\n                var eneAttack = [i2, j2].toString();\n\n                if (eneAttack == [this.row, this.col].toString()) {\n                  this.check = true;\n                  noCheck = false;\n                }\n\n                if (eneAttack == [line, 5].toString() || eneAttack == [line, 6].toString()) {\n                  cKsPassedCondition = true;\n                  this.castleKingSide = false;\n                }\n\n                if (eneAttack == [line, 3].toString() || eneAttack == [line, 2].toString()) {\n                  cQsPassedCondition = true;\n                  this.castleQueenSide = false;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      if (noCheck == true) {\n        this.check = false;\n      }\n\n      if (cKsPassedCondition == false) {\n        this.castleKingSide = true;\n      }\n\n      if (cQsPassedCondition == false) {\n        this.castleQueenSide = true;\n      }\n    }\n  }]);\n\n  return King;\n}(Piece);\n\n//# sourceURL=webpack://Chess/./src/Pieces.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./main.js");
/******/ 	
/******/ })()
;